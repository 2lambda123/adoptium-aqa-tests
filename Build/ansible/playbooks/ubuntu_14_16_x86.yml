- hosts: all
  remote_user: root
  become: yes

  tasks:
  - block:
  
    - name: Add the openjdk repository
      apt_repository: repo='ppa:openjdk-r/ppa'
      when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version == "16")

    - name: Install Build tools
      apt: pkg={{ item }} state=latest update_cache=yes
      with_items:
        - ccache
        - cpio
        - g++
        - gcc
        - libasound2-dev
        - libcups2-dev
        - libffi-dev
        - libx11-dev
        - libxext-dev 
        - libxrender-dev
        - libxt-dev
        - libxtst-dev
        - make
        - openjdk-7-jdk
        - zip
        - wget		
        - git		

    - name: Install Test tools
      apt: name={{item}} state=installed
      with_items:    
        - ant
        - ant-contrib
        - jq
        - perl

    - name: Create jenkins user
      action: user name=jenkins state=present
      ignore_errors: yes

    - name: Set authorized key for jenkins
      authorized_key:
        user: jenkins
        state: present
        key: "{{ lookup('file', '/home/ubuntu/keys/id_rsa.pub') }}"

    - name: download ccache.tar.gz
      get_url:
        url: https://www.samba.org/ftp/ccache/ccache-3.1.9.tar.gz
        dest: /home/jenkins/ccache.tar.gz
        mode: 0440

    - name: extract ccache
      unarchive:
        src: /home/jenkins/ccache.tar.gz
        dest: /home/jenkins
        copy: False

    - name: Running ./configure & make for CCACHE
      shell: cd /home/jenkins/ccache-3.1.9 && ./configure && make && sudo make install
      become: yes

    - debug: msg='Host OS setup completed. Calling Nagios playbook'
    - include: nagios/nagios_ub14-16_x86.yml
      static: yes

    - name: Setup zeus user
      shell: adduser zeus --shell /bin/bash --disabled-password --gecos ""
      ignore_errors: yes

    - name: Create SSH Key folder for zeus
      file: 
        path: /home/zeus/.ssh
        owner: zeus
        group: zeus
        mode: 0700
        state: directory

    - name: Add key
      authorized_key:
        user: zeus
        state: present
        key: "{{ lookup('file', '/home/ubuntu/keys/zeus.key') }}"

    - name: Grant zeus sudo powers
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^zeus'
        line: 'zeus ALL=(ALL) NOPASSWD: ALL'

    - name: Check if swap file exists
      shell: cat /etc/fstab
      register: check_fstab

    - name: Create swap file
      command: fallocate -l 2G /swapfile
      when: check_fstab.stdout.find('swap') == ""

    - name: Set swap file permissions
      file: path=/swapfile
          owner=root
          group=root
          mode=0600
      when: check_fstab.stdout.find('swap') == ""

    - name: Create swap area device
      command: mkswap /swapfile
      when: check_fstab.stdout.find('swap') == ""

    - name: Mount swap file
      command: swapon /swapfile
      when: check_fstab.stdout.find('swap') == ""

    - name: Add swap to fstab
      mount: src=/swapfile
        name=none
        fstype=swap
        opts=sw
        passno=0
        dump=0
        state=present
      when: check_fstab.stdout.find('swap') == ""

    - name: Add cron job to check for updates
      cron: name="Check for Updates every Sunday at 5am"
            weekday="6"
            minute="0"
            hour="5"
            user=root
            job="/usr/bin/apt-get update && /usr/bin/apt-get -y upgrade"
            state=present

    - name: Install Test tools
      apt: name={{item}} state=installed
      with_items:
        - ant
        - ant-contrib
        - git
        - jq
        - perl
        - wget

    - name: Install X11
      apt: name={{item}} state=latest update_cache=yes
      with_items:
        - xauth
        - xorg
        - xserver-xorg-legacy 

    - name: Create X11 Wrapper config file
  	  shell: touch /etc/X11/Xwrapper.config

    - blockinfile:
        dest: /etc/X11/Xwrapper.config	
        block: |
          allowed_users=anybody	
          needs_root_rights=yes

    - name: Start X11
      sudo: yes
      sudo_user: jenkins
  	  shell: startx -- :1 &
  	  ignore_errors: True
  	  no_log: True

    - debug: msg='Send Slack notification, successful'
    - include: slack_notification/successful_slack.yml
      static: yes

    - name: Add jenkins to the audio group
      user: name=jenkins
        groups=audio
        append=yes

    - name: Install Pulseaudio
      apt: pkg=pulseaudio state=latest update_cache=yes

    rescue:
    - debug: msg='Something went wrong... Sending Slack notification failure'
    - include: slack_notification/failure_slack.yml
      static: yes
