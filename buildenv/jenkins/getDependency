#!groovy

LABEL='ci.role.test&&hw.arch.x86&&sw.os.linux'

stage('Queue') {
    if (params.ACTIVE_NODE_TIMEOUT && params.ACTIVE_NODE_TIMEOUT.isInteger()) {
        waitForANodeToBecomeActive("$LABEL", params.ACTIVE_NODE_TIMEOUT)
    } else {
        waitForANodeToBecomeActive("$LABEL", "0")
    }
    node("$LABEL") {
       cleanWs()
       testBuild()
    }
}

def testBuild() {
	def time_limit = 8
	if(params.TIME_LIMIT) {
		time_limit = params.TIME_LIMIT.toInteger()
	}
	timeout(time: time_limit, unit: 'HOURS') {
		try {
			if( params.BUILD_TYPE == "systemtest" ){
				sh 'curl -OLJks "https://api.adoptopenjdk.net/v3/binary/latest/8/ga/linux/x64/jdk/hotspot/normal/adoptopenjdk"'
				sh 'mkdir ${WORKSPACE}/j2sdk-image'
				sh 'tar -xzf OpenJDK8U-jdk_x64_linux_hotspot*.gz -C ${WORKSPACE}/j2sdk-image --strip-components 1'
				sh '${WORKSPACE}/j2sdk-image/jre/bin/java -version'
				sh 'git clone https://github.com/AdoptOpenJDK/openjdk-systemtest'
				sh 'git clone https://github.com/AdoptOpenJDK/stf'
				sh 'ant -f ./openjdk-systemtest/openjdk.build/build.xml -Djava.home=${WORKSPACE}/j2sdk-image/jre -Dprereqs_root=${WORKSPACE}/systemtest_prereqs configure'
				sh 'ant -f ./openjdk-systemtest/openjdk.test.mauve/build.xml -Djava.home=${WORKSPACE}/j2sdk-image/jre -Dprereqs_root=${WORKSPACE}/systemtest_prereqs configure'
				archiveArtifacts '**/systemtest_prereqs/cvsclient/org-netbeans-lib-cvsclient.jar'
				archiveArtifacts '**/systemtest_prereqs/mauve/mauve.jar'
				archiveArtifacts '**/systemtest_prereqs/junit-4.12/junit-4.12.jar'
				archiveArtifacts '**/systemtest_prereqs/junit-4.12/hamcrest-core-1.3.jar'
				archiveArtifacts '**/systemtest_prereqs/log4j-2.13.3/log4j-api-2.13.3.jar'
				archiveArtifacts '**/systemtest_prereqs/log4j-2.13.3/log4j-core-2.13.3.jar'
				archiveArtifacts '**/systemtest_prereqs/apache-ant-1.10.2/lib/ant-launcher.jar'
				archiveArtifacts '**/systemtest_prereqs/asm-7.3.1/asm-7.3.1.jar'
				archiveArtifacts '**/systemtest_prereqs/tools/tools.jar'
			} else {
				sh 'curl -Os https://raw.githubusercontent.com/AdoptOpenJDK/TKG/master/scripts/getDependencies.pl'
				sh 'perl ./getDependencies.pl -path . -task default'
				archiveArtifacts '*.jar, *.zip, *.txt'
			}
		} finally {
			cleanWs()
		}
	}
}

def waitForANodeToBecomeActive(def label, String activeNodeTimeoutString) {
    def nodes = nodesByLabel(label).size()
    if (nodes < 1) {
        // If no active node matches the label, we see if there's a timeout value set.
        // If there is, we wait and check again periodically. If not, we fail immediately.

        boolean didnt_find_node = true

        int activeNodeTimeout = activeNodeTimeoutString as Integer

        echo "Cannot find an active node matching this label: " + label
        echo "Will now wait until " + activeNodeTimeoutString + " minutes (ACTIVE_NODE_TIMEOUT) has passed, re-checking periodically."

        while (activeNodeTimeout > 0) {
            sleep(60 * 1000) // 1 minute sleep
            activeNodeTimeout--
            if (nodesByLabel(LABEL).size() > 0) {
                echo "A node matching the aforementioned label has become active."
                return
            }
        }

        assert false : "Cannot find any machine that matches the LABEL: " + LABEL
    }
}

return this
