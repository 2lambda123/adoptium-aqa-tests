#!groovy
pipeline {
    agent {label "${params.MACHINE_LABEL}"}
    parameters {
    	string (defaultValue: "AdoptOpenJDK", description: 'personal repo', name: 'personalRepo')
    	string (defaultValue: "master", description: 'personal branch', name: 'personalBranch')
		choice (choices: 'x64_linux\nx64_mac\ns390x_linux\nppc64le_linux\naarch64_linux', description: 'PLATFORM?', name: 'PLATFORM')
		choice (choices: 'SE90\nSE80\nSE100', description: 'What is JAVA_VERSION?', name: 'JAVA_VERSION')
		choice (choices: 'openjdk9-openj9\nopenjdk8-openj9\nopenjdk9\nopenjdk8\nopenjdk10\nopenjdk10-openj9', description: 'What is JVM Version?', name: 'JVM_VERSION')
		string (defaultValue: '', description: 'Specific test project, leave blank by default for all projects to be compiled, e.g. openjdk_regression systemtest performance jck thirdparty_containers', name: 'TESTPROJECT')
		string (defaultValue: 'runtest', description: 'Test Target to execute, default is runtest which will run all tests. You can also select sub-targets such as:\ntop level: openjdk, sanity, extended, perf, etc\ndirectory level: prefix a directory with test (eg test_systemtest)\nindividual test: jdk_bean_SE80_0, etc', name: 'TARGET')
		choice (choices: 'linux&&x64&&test\nmac&&x64&&test\nwindows&&x64&&test', description: 'What is machine label?', name: 'MACHINE_LABEL')
		choice (choices: 'releases\nnightly\nupstream\ncustomized', description: 'Where is sdk?', name: 'SDK_RESOURCE')
		string (defaultValue: "N/A", description: 'Upstream build name, only set when SDK_RESOURCE is upstream', name: 'UPSTREAM_JOB_NAME')
		string (defaultValue: "N/A", description: 'Build number of upstream build, working with UPSTREAM_JOB_NAME, only set when SDK_RESOURCE is upstream', name: 'UPSTREAM_JOB_NUMBER')
		string (defaultValue: "N/A", description: 'Customized SDK URL, only set when SDK_RESOURCE customized', name: 'CUSTOMIZED_SDK_URL')
		}
	options {
    	skipDefaultCheckout true
  	}
	environment {
                JCL_VERSION='current'
                OPENJDK_TEST="$WORKSPACE/openjdk-tests"
                SPEC='linux_x86-64'
                BUILD_LIST="$TESTPROJECT"
                REPO_URL="https://github.com/$personalRepo/openjdk-tests.git"
    }
    stages {
        stage('Setup') {
            steps {
				timestamps{
					cleanWs()
					sh 'printenv'
                	script {
                		if (params.SDK_RESOURCE == 'upstream') {
                			dir('openjdkbinary') {
	                			step([$class: 'CopyArtifact',
	                        		fingerprintArtifacts: true,
	                        		projectName: "${params.UPSTREAM_JOB_NAME}",
	                        		selector: [$class: 'SpecificBuildSelector',
	                                buildNumber: "${params.UPSTREAM_JOB_NUMBER}"]])
                            }
            			}
                	}
                	checkout([
				        $class: 'GitSCM', branches: [[name: "*/${params.personalBranch}"]],
				        extensions: [[$class:'CloneOption', shallow:true, depth:1],[$class: 'CleanBeforeCheckout'],[$class: 'RelativeTargetDirectory', relativeTargetDir: 'openjdk-tests']],
			        	userRemoteConfigs: [[url: "${REPO_URL}"]]
			        ])
			        sh 'chmod 755 $OPENJDK_TEST/maketest.sh'
                	sh 'chmod 755 $OPENJDK_TEST/get.sh'
                	sh "$OPENJDK_TEST/get.sh -s $WORKSPACE -t $OPENJDK_TEST -p ${params.PLATFORM} -v ${params.JVM_VERSION} -r ${params.SDK_RESOURCE} -c ${params.CUSTOMIZED_SDK_URL}"
					}
                }
        }
        stage('Build') {
            steps {
				timestamps{
                	echo 'Building tests...'
                	withEnv(["JAVA_HOME=$WORKSPACE/openjdkbinary/j2sdk-image/${(params.JAVA_VERSION == 'SE80') ? 'jre/' : ''}",
                	"JAVA_BIN=$WORKSPACE/openjdkbinary/j2sdk-image/${(params.JAVA_VERSION == 'SE80') ? 'jre/' : ''}bin",
                	"JAVA_VERSION=${params.JAVA_VERSION}"]) {
                		sh '$OPENJDK_TEST/maketest.sh $OPENJDK_TEST'
					}
                }
            }
        }
        stage('Test') {
            steps {
				timestamps{
                	echo 'Running tests...'
                	withEnv(["JAVA_HOME=$WORKSPACE/openjdkbinary/j2sdk-image/${(params.JAVA_VERSION == 'SE80') ? 'jre/' : ''}",
                	"JAVA_BIN=$WORKSPACE/openjdkbinary/j2sdk-image/${(params.JAVA_VERSION == 'SE80') ? 'jre/' : ''}bin",
                	"JAVA_VERSION=${params.JAVA_VERSION}"]) {
                		sh "$OPENJDK_TEST/maketest.sh $OPENJDK_TEST ${params.TARGET}"
					}
				}
            }
        }
    }
    post {
    	always {
 			step([$class: "TapPublisher", testResults: "**/*.tap"])
            archiveArtifacts artifacts: '**/*.tap', fingerprint: true, allowEmptyArchive: true
            junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml'
            archiveArtifacts artifacts: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml', fingerprint: true, allowEmptyArchive: true
             script {
            	if (params.TARGET == 'test_systemtest') {  
	       	 		sh 'tar -zcf openjdk-systemtest-results.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*'
	       	 		archiveArtifacts artifacts: '**/openjdk-systemtest-results.tar.gz', fingerprint: true, allowEmptyArchive: true
		    	}     
	    	}  
		}
 	}
    
}
