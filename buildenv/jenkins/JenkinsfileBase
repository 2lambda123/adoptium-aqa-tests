#!groovy
/* template jenkinsfile for adoptopenjdk test builds*/
def getBuildList() {
	def TESTPROJECTS = [system:'systemtest', perf:'performance', jck:'jck', external:'thirdparty_containers', functional: 'functional', openjdk:'openjdk_regression', jdk:'openjdk_regression', runtest:'', sanity:'', extended:'']
	String fullTarget="${TARGET}"
	String[] levelTargets = fullTarget.split('\\.')
	String groupTarget = levelTargets[-1]
	String[] partsTarget = groupTarget.split('_|-')
	String simpleTarget = partsTarget[0]
	def TESTPROJECT = TESTPROJECTS[simpleTarget]
	return TESTPROJECT
}

def archiveTestBinaries() {
	dir("$WORKSPACE") {
		sh "tar -zcf test-binaries.tar.gz ./openjdk-tests ./jvmtest ./openjdkbinary"
	}
	archiveArtifacts artifacts: '**/test-binaries.tar.gz', fingerprint: true, allowEmptyArchive: false
}

def stageTestBinaries() {
	copyArtifacts filter: 'test-binaries.tar.gz', fingerprintArtifacts: true, projectName: "${env.JOB_NAME}", selector: specific("${env.BUILD_ID}")
	sh "tar -xzf test-binaries.tar.gz"
	echo pwd()
	sh "ls"
}

def setupEnv() {
	env.JAVA_BIN = "$WORKSPACE/openjdkbinary/j2sdk-image/${(JAVA_VERSION == 'SE80') ? 'jre/' : ''}bin"
	env.JRE_IMAGE = "$WORKSPACE/openjdkbinary/j2jre-image"
	env.JAVA_HOME = "${JAVA_BIN}/.."
	env.JAVA_VERSION = "${JAVA_VERSION}"
	env.JVM_VERSION = "${JVM_VERSION}"
	env.SPEC = "${SPEC}"

	if( params.BUILD_LIST ) {
		env.BUILD_LIST = params.BUILD_LIST
	} else {
		env.BUILD_LIST = "${getBuildList()}"
	}
	
	if( params.PERF_ROOT ) {
		env.PERF_ROOT = params.PERF_ROOT
	} else {
		env.PERF_ROOT = "$WORKSPACE/../benchmarks"
	}

	if (env.BUILD_LIST == "jck") {
		if ( JAVA_VERSION == "SE80" ) {
			env.JCK_VERSION = "jck8b"
		} else if ( JAVA_VERSION == "SE90" ) {
			env.JCK_VERSION = "jck9"
		} else if ( JAVA_VERSION == "SE100" ) {
			env.JCK_VERSION = "jck10"
		}
		env.JCK_ROOT = "$WORKSPACE/../jck_root"
		echo "env.JCK_ROOT is: ${env.JCK_ROOT}, env.JCK_VERSION is: ${env.JCK_VERSION}"
		if( params.JCK_GIT_REPO ) {
			env.JCK_GIT_REPO = params.JCK_GIT_REPO
			echo "env.JCK_GIT_REPO is ${env.JCK_GIT_REPO}"
		} else {
			echo "params.JCK_GIT_REPO was not defined"
		}
	}
	
	if (JVM_VERSION.contains('openj9')) {
		JAVA_IMPL = 'openj9'
	} else if (JVM_VERSION.contains('sap')) {
		JAVA_IMPL = 'sap'
	} else {
		JAVA_IMPL = 'hotspot'
	}
	env.JAVA_IMPL= "${JAVA_IMPL}"
	if (env.BUILD_LIST == 'openjdk_regression' ||  env.BUILD_LIST == 'thirdparty_containers') {
		env.DIAGNOSTICLEVEL ='noDetails'
	}
	sh 'printenv'
}

def setupParallelEnv() {
	stage('setupParallelEnv') {
		timestamps{
			cleanWs()
			setupEnv()
		}
	}
}

def setup() {
	stage('Setup') {
		timestamps{
			setupEnv()
			// get TestKitGen and test JDK for test
			try{
				CUSTOMIZED_SDK_URL = "${CUSTOMIZED_SDK_URL}"
			} catch (MissingPropertyException e) {
				CUSTOMIZED_SDK_URL = ''
			}
			sh 'chmod 755 $WORKSPACE/openjdk-tests/maketest.sh'
			sh 'chmod 755 $WORKSPACE/openjdk-tests/get.sh'
			if (fileExists('openjdkbinary')) {
				dir('openjdkbinary') {
					deleteDir()
				}
			}
			if (fileExists('jvmtest')) {
				dir('jvmtest') {
					deleteDir()
				}
			}
			if (SDK_RESOURCE == 'upstream' && CUSTOMIZED_SDK_URL == '') {
				dir('openjdkbinary') {
					step([$class: 'CopyArtifact',
						fingerprintArtifacts: true,
						flatten: true,
						filter: "**/*.tar.gz,**/*.zip",
						projectName: "${params.UPSTREAM_JOB_NAME}",
						selector: [$class: 'SpecificBuildSelector', buildNumber: "${params.UPSTREAM_JOB_NUMBER}"]])
				}
			}
			CUSTOMIZED_SDK_URL_OPTION = (CUSTOMIZED_SDK_URL != "") ? "-c $CUSTOMIZED_SDK_URL" : ""
			OPENJ9_REPO_OPTION = (params.OPENJ9_REPO) ? "--openj9_repo ${params.OPENJ9_REPO}" : "--openj9_repo https://github.com/eclipse/openj9.git"
			OPENJ9_BRANCH_OPTION = (params.OPENJ9_BRANCH) ? "--openj9_branch ${params.OPENJ9_BRANCH}" : ""
			OPENJ9_SHA_OPTION = (params.OPENJ9_SHA) ? "--openj9_sha ${params.OPENJ9_SHA}" : ""
			
			// vendor test
			// expect VENDOR_TEST_* to be comma separated string parameters
			VENDOR_TEST_REPOS = (params.VENDOR_TEST_REPOS) ? "--vendor_repos \"${params.VENDOR_TEST_REPOS}\"" : ""
			VENDOR_TEST_BRANCHES = (params.VENDOR_TEST_BRANCHES) ? "--vendor_branches \"${params.VENDOR_TEST_BRANCHES}\"" : ""
			VENDOR_TEST_DIRS = (params.VENDOR_TEST_DIRS) ? "--vendor_dirs \"${params.VENDOR_TEST_DIRS}\"" : ""
			VENDOR_TEST_SHAS = (params.VENDOR_TEST_SHAS) ? "--vendor_shas \"${params.VENDOR_TEST_SHAS}\"" : ""

            if (params.USER_CREDENTIALS_ID) {
                sshagent(credentials:["${params.USER_CREDENTIALS_ID}"]) {
                    sh "bash $WORKSPACE/openjdk-tests/get.sh -s $WORKSPACE -t $WORKSPACE/openjdk-tests -p $PLATFORM -v $JVM_VERSION -r $SDK_RESOURCE ${CUSTOMIZED_SDK_URL_OPTION} ${OPENJ9_REPO_OPTION} ${OPENJ9_BRANCH_OPTION} ${OPENJ9_SHA_OPTION} ${VENDOR_TEST_REPOS} ${VENDOR_TEST_BRANCHES} ${VENDOR_TEST_DIRS} ${VENDOR_TEST_SHAS}"
                }
            } else {
                if ( SPEC.contains('win') ) {
                    bat "$WORKSPACE/openjdk-tests/get.bat -sdkdir $WORKSPACE -testdir $WORKSPACE/openjdk-tests -platform $PLATFORM -jvmversion $JVM_VERSION -sdk_resource $SDK_RESOURCE ${CUSTOMIZED_SDK_URL_OPTION} ${OPENJ9_REPO_OPTION} ${OPENJ9_BRANCH_OPTION} ${OPENJ9_SHA_OPTION}"
                } else {
                    sh "$WORKSPACE/openjdk-tests/get.sh -s $WORKSPACE -t $WORKSPACE/openjdk-tests -p $PLATFORM -v $JVM_VERSION -r $SDK_RESOURCE ${CUSTOMIZED_SDK_URL_OPTION} ${OPENJ9_REPO_OPTION} ${OPENJ9_BRANCH_OPTION} ${OPENJ9_SHA_OPTION} ${VENDOR_TEST_REPOS} ${VENDOR_TEST_BRANCHES} ${VENDOR_TEST_DIRS} ${VENDOR_TEST_SHAS}"
                }
            }
		}
	}
}

def buildTest() {
	stage('Build') {
		timestamps{
			echo 'Building tests...'
			if (JAVA_VERSION == 'SE80') {
				sh 'chmod 755 ${JAVA_BIN}/java'
				sh 'chmod 755 ${JAVA_BIN}/../../bin/javac'
				sh 'chmod 755 ${JAVA_BIN}/../../bin/java'
			}
		
			if ( params.PERF_CREDENTIALS_ID ) {
				withCredentials([usernamePassword(credentialsId: "$params.PERF_CREDENTIALS_ID",
					passwordVariable: "PASSWORD_VAR", usernameVariable: "USERNAME_VAR")]) {
						env.PERF_USERNAME = USERNAME_VAR
						env.PERF_PASSWORD = PASSWORD_VAR
				}
			}

			try {
				//get pre-staged jars from test.getDependency build before test compilation
				copyArtifacts fingerprintArtifacts: true, projectName: "test.getDependency", selector: lastSuccessful(), target: 'openjdk-tests/TestConfig/lib'
			} catch (Exception e) {
				echo 'Cannot run copyArtifacts from test.getDependency. Skipping copyArtifacts...'
			}

			if( params.JCK_GIT_REPO ) {
				sshagent (credentials: ["$params.SSH_AGENT_CREDENTIAL"]) {
					sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests"
				}
			} else {
				if ( SPEC.contains('win') ) {
					bat "$WORKSPACE/openjdk-tests/maketest.bat $WORKSPACE/openjdk-tests"
				} else {
					sh '$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests'
				}
			}
		}
	}
}

def runTest(subDir) {
	stage('Test') {
		timestamps{
			if (env.BUILD_LIST == "jck"){
				wrap([$class: 'Xvfb', autoDisplayName: true]) {
					def DISPLAY = sh (
						script: 'ps -f  | grep \'[X]vfb\' | awk \'{print \$9}\'',
						returnStdout: true
					).trim()
					env.DISPLAY = "${DISPLAY}"
					echo "env.DISPLAY is ${env.DISPLAY}"
					echo 'Running tests...'
					sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests/${subDir} _$TARGET"
				}
			} else {
				echo 'Running tests...'
				if ( SPEC.contains('win') ) {
					bat "$WORKSPACE/openjdk-tests/maketest.bat $WORKSPACE/openjdk-tests/${subDir} _$TARGET"
				} else {
					sh '$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests/${subDir} _$TARGET'
				}
			}
		}
	}
}

def post(test_target) {
	stage('Post') {
		timestamps{
			step([$class: "TapPublisher", testResults: "**/*.tap", outputTapToConsole: false])
			junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml'
			if (currentBuild.result == 'UNSTABLE') {
				archiveArtifacts artifacts: '**/work/**/*.jtr, **/junitreports/**/*.xml', fingerprint: true, allowEmptyArchive: true
				if ( SPEC.contains('win') ) {
					bat "tar -zcf ${test_target}_test_output.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*"
				} else {
					sh "tar -zcf ${test_target}_test_output.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*"
				}
				archiveArtifacts artifacts: "**/${test_target}_test_output.tar.gz", fingerprint: true, allowEmptyArchive: true
			}
			//for performance test, achive regardless the build result
			def benchmark_test_output_dir = 'jvmtest/performance/odm/ilog_wodm881/leftoverResults';
			if (fileExists(benchmark_test_output_dir)) {
				sh "tar -zcf benchmark_test_output.tar.gz ${benchmark_test_output_dir}"
				archiveArtifacts artifacts: '**/benchmark_test_output.tar.gz', fingerprint: true, allowEmptyArchive: true
			}
			cleanWs cleanWhenFailure: false
		}
	}
}

def testBuild() {
	def time_limit = 8
	if(params.TIME_LIMIT) {
		time_limit = params.TIME_LIMIT.toInteger()
	}
	timeout(time: time_limit, unit: 'HOURS') {
		addNodeToDescription()

		// prepare environment and compile test projects
		setup()
		buildTest()
		if( params.IS_PARALLEL ){
			// archive compiled test binaries for parallel jobs
			archiveTestBinaries()
			def testSubDirs = []
			def testSubDirSize = 0
			dir("$WORKSPACE/openjdk-tests/${env.BUILD_LIST}") {
				testSubDirs = sh(returnStdout: true, script: "ls -d */").trim().split()
				testSubDirSize = testSubDirs.size()
			}
			echo "testSubDirSize is ${testSubDirSize}, testSubDirs is ${testSubDirs}, running test in parallel mode"
			def parallel_tests = [:]
			for (int i = 0; i < testSubDirSize; i++) {
				def testSubDir = testSubDirs[i].trim().replace("/","");
				parallel_tests[testSubDir] = {
					node ("$LABEL") {
						addNodeToDescription()
						setupParallelEnv()
						stageTestBinaries()
						if( env.BUILD_LIST == "jck") {
							buildTest()
						}
						runTest("${env.BUILD_LIST}/${testSubDir}")
						post("${env.BUILD_LIST}-${testSubDir}")
					}
				}
			}
			parallel parallel_tests
			cleanWs()
		} else {
			echo "running test in default mode"
			runTest("${env.BUILD_LIST}")
			post("${env.BUILD_LIST}")
		}
		
	}
}

def setLabelParam() {
	if( params.LABEL ) {
		LABEL = params.LABEL
	}
}

def addNodeToDescription() {
	def description = (currentBuild.description) ? currentBuild.description + "<br>" : ""
	currentBuild.description = description + "<a href=${JENKINS_URL}computer/${NODE_NAME}>${NODE_NAME}</a>"
}
return this