#!groovy
/* template jenkinsfile for adoptopenjdk test builds*/
OPENJDK_TEST="$WORKSPACE/openjdk-tests"
def TESTPROJECTS = [system:'systemtest', perf:'performance', jck:'jck', external:'thirdparty_containers', openjdk:'openjdk_regression', runtest:'', sanity:'', extended:'' ]
TESTPROJECT=TESTPROJECTS["$TARGET"]
def test() {
	timeout(time: 6, unit: 'HOURS') {
		stage('Setup') {
			timestamps{
				env.JCL_VERSION = "current"
				env.JAVA_BIN = "$WORKSPACE/openjdkbinary/j2sdk-image/${(JAVA_VERSION == 'SE80') ? 'jre/' : ''}bin"
				env.JAVA_HOME = "${JAVA_BIN}/.."
				env.JAVA_VERSION = "${JAVA_VERSION}"
				env.JVM_VERSION = "${JVM_VERSION}"
				try{
					CUSTOMIZED_SDK_URL = "${CUSTOMIZED_SDK_URL}"
				} catch (MissingPropertyException e) {
					CUSTOMIZED_SDK_URL = ''
				}
				env.SPEC = "${SPEC}"
				env.BUILD_LIST= "${TESTPROJECT}"
				if (JVM_VERSION.contains('openj9')) {
					JAVA_IMPL = 'openj9'
				} else if (JVM_VERSION.contains('sap')) {
					JAVA_IMPL = 'sap'
				} else {
					JAVA_IMPL = 'hotspot'
				}
				env.JAVA_IMPL= "${JAVA_IMPL}"
				if (TARGET.contains('jdk')) {
					env.DIAGNOSTICLEVEL ='noDetails'
				}
				sh 'printenv'
				
				sh "chmod 755 ${OPENJDK_TEST}/maketest.sh"
				sh "chmod 755 ${OPENJDK_TEST}/get.sh"
				if (fileExists('openjdkbinary')) {
					dir('openjdkbinary') {
						deleteDir()
					}
				}
				if (fileExists('jvmtest')) {
					dir('jvmtest') {
						deleteDir()
					}
				}
				if (SDK_RESOURCE == 'upstream' && CUSTOMIZED_SDK_URL == '') {
					dir('openjdkbinary') {
						step([$class: 'CopyArtifact',
							fingerprintArtifacts: true,
							projectName: "$UPSTREAM_JOB_NAME",
							selector: upstream(allowUpstreamDependencies: false, fallbackToLastSuccessful: false, upstreamFilterStrategy: 'UseGlobalSetting')])
					}
				}
				sh "$OPENJDK_TEST/get.sh -s $WORKSPACE -t $OPENJDK_TEST -p $PLATFORM -v $JVM_VERSION -r $SDK_RESOURCE -c $CUSTOMIZED_SDK_URL"
			}
		}
		stage('Build') {
			timestamps{
				echo 'Building tests...'
				sh "$OPENJDK_TEST/maketest.sh $OPENJDK_TEST"
			}
		}
		stage('Test') {
			timestamps{
				echo 'Running tests...'
				sh "$OPENJDK_TEST/maketest.sh $OPENJDK_TEST _$TARGET"
			}
		}
		stage('Post') {
			timestamps{
				step([$class: "TapPublisher", testResults: "**/*.tap"])
				junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml'
				if (params.TARGET == 'system') {
					sh 'tar -zcf openjdk-systemtest-results.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*'
					archiveArtifacts artifacts: '**/openjdk-systemtest-results.tar.gz', fingerprint: true, allowEmptyArchive: true
				}
				if (currentBuild.result == 'UNSTABLE') {
					archiveArtifacts artifacts: '**/*.tap', fingerprint: true, allowEmptyArchive: true
					archiveArtifacts artifacts: '**/work/**/*.jtr, **/junitreports/**/*.xml', fingerprint: true, allowEmptyArchive: true
				}
			}
		}
	}
}
return this