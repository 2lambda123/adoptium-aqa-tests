#!groovy

/*
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

/**
 * A template that defines a test job.
 */

def getBaseJDKImpl(JDK_IMPL) {
	if (JDK_IMPL == "hotspot" || JDK_IMPL == "sap" || JDK_IMPL == "corretto" || JDK_IMPL == "dragonwell") {
		return "hotspot"
	}
	return JDK_IMPL
}

if (!binding.hasVariable('JDK_IMPL')) JDK_IMPL = "openj9"
if (!binding.hasVariable('ARTIFACTORY_SERVER')) ARTIFACTORY_SERVER = ""
if (!binding.hasVariable('ARTIFACTORY_REPO')) ARTIFACTORY_REPO = ""
if (!binding.hasVariable('ARTIFACTORY_ROOT_DIR')) ARTIFACTORY_ROOT_DIR = ""
if (!binding.hasVariable('TIME_LIMIT')) TIME_LIMIT = "10"
if (!binding.hasVariable('SUFFIX')) SUFFIX = ""
if (!binding.hasVariable('JCK_GIT_REPO')) JCK_GIT_REPO = ""
if (!binding.hasVariable('JCK_GIT_REPO_PREFIX')) JCK_GIT_REPO_PREFIX = ""
if (!binding.hasVariable('SSH_AGENT_CREDENTIAL')) SSH_AGENT_CREDENTIAL = ""
if (!binding.hasVariable('KEEP_REPORTDIR')) KEEP_REPORTDIR = "true"
if (!binding.hasVariable('AUTO_DETECT')) AUTO_DETECT = true
if (!binding.hasVariable('TEST_JOB_NAME')) TEST_JOB_NAME = ""
if (!binding.hasVariable('TARGET')) TARGET = ""
if (!binding.hasVariable('BUILD_LIST')) BUILD_LIST = ""
if (!binding.hasVariable('SDK_RESOURCE')) SDK_RESOURCE = "upstream"
if (!binding.hasVariable('TRIGGER_SCHEDULE')) TRIGGER_SCHEDULE = ""
if (!binding.hasVariable('LIGHT_WEIGHT_CHECKOUT')) LIGHT_WEIGHT_CHECKOUT = false
if (!binding.hasVariable('NUM_MACHINES')) NUM_MACHINES = ""

if (!binding.hasVariable('BUILDS_TO_KEEP')) {
	BUILDS_TO_KEEP = 10
} else {
	BUILDS_TO_KEEP = BUILDS_TO_KEEP.toInteger()
}

if (!binding.hasVariable('DAYS_TO_KEEP')) {
	DAYS_TO_KEEP = 60
} else {
	DAYS_TO_KEEP = DAYS_TO_KEEP.toInteger()
}

if (binding.hasVariable('LEVELS')) {
	LEVELS = LEVELS.split(',')
} else {
	// 'sanity','extended','special'
	LEVELS = ['sanity']
}

if (binding.hasVariable('JDK_VERSIONS')) {
	JDK_VERSIONS = JDK_VERSIONS.split(',')
} else {
	JDK_VERSIONS = [8]
}

if (binding.hasVariable('GROUPS')) {
	GROUPS = GROUPS.split(',')
} else {
	// 'functional','system','openjdk', 'perf', 'external', 'jck'
	GROUPS = ['functional']
}


if (binding.hasVariable('ARCH_OS_LIST')) {
	ARCH_OS_LIST = ARCH_OS_LIST.split(',')*.trim()
} else {
	ARCH_OS_LIST = [
		'arm_linux',
		'aarch64_linux',
		'ppc64_aix',
		'ppc64le_linux',
		's390x_linux',
		's390x_zos',
		'x86-32_windows',
		'x86-64_linux',
		'x86-64_linux_xl',
		'x86-64_mac',
		'x86-64_mac_xl',
		'x86-64_windows'
	]
}

JDK_IMPL_SN = JDK_IMPL
JDK_IMPL_BASE = getBaseJDKImpl(JDK_IMPL)
if (JDK_IMPL == "openj9") {
	JDK_IMPL_SN = "j9"
} else if (JDK_IMPL == "hotspot") {
	JDK_IMPL_SN = "hs"
}

// If user specifies a PARALLEL_DEFAULT option, prepend it to the list so it becomes the default in the generated job(s)
PARALLEL_LIST = ['None', 'Dynamic', 'Subdir', 'NodesByIterations']
if (binding.hasVariable('PARALLEL_DEFAULT')) {
	PARALLEL_LIST.remove(PARALLEL_DEFAULT)
	PARALLEL_LIST.add(0, PARALLEL_DEFAULT)
}

println "LEVELS: ${LEVELS}"
println "JDK_VERSIONS: ${JDK_VERSIONS}"
println "GROUPS: ${GROUPS}"
println "ARCH_OS_LIST: ${ARCH_OS_LIST}"

def OPENJ9_REPO = "https://github.com/eclipse/openj9.git"
def ADOPTOPENJDK_REPO = "https://github.com/AdoptOpenJDK/openjdk-tests.git"
def ADOPTOPENJDK_BRANCH = "master"

// Jenkins does not support using Repository URL and Branch build parameters with lightweight checkout together
// (See https://issues.jenkins.io/browse/JENKINS-48431)
// Set Repository URL and Branch as build parameters by default
// If LIGHT_WEIGHT_CHECKOUT is set to true, set Repository URL and Branch to its explicit value
def ADOPTOPENJDK_REPO_BUILD_PARAM = '${ADOPTOPENJDK_REPO}'
def ADOPTOPENJDK_BRANCH_BUILD_PARAM = '${ADOPTOPENJDK_BRANCH}'
def SCRIPT_PATH = "openjdk-tests/buildenv/jenkins/openjdk_tests"

LIGHT_WEIGHT_CHECKOUT = LIGHT_WEIGHT_CHECKOUT.toBoolean()
if (LIGHT_WEIGHT_CHECKOUT) {
	ADOPTOPENJDK_REPO_BUILD_PARAM = ADOPTOPENJDK_REPO
	ADOPTOPENJDK_BRANCH_BUILD_PARAM = ADOPTOPENJDK_BRANCH
	SCRIPT_PATH = "buildenv/jenkins/openjdk_tests"
}

// Params separator styles
String sectionHeaderStyleCss = '''
    color: white;
    background: green;
    font-family: Roboto, sans-serif !important;
    padding: 5px;
    text-align: center;
'''

String separatorStyleCss = '''
    border: 0;
    border-bottom: 1px dashed #ccc;
    background: #999;
'''

ARCH_OS_LIST.each { ARCH_OS ->
	JDK_VERSIONS.each { JDK_VERSION ->
		LEVELS.each { LEVEL ->
			GROUPS.each { GROUP ->
				def ACTUAL_TEST_JOB_NAME = TEST_JOB_NAME ? TEST_JOB_NAME : "Test_openjdk${JDK_VERSION}_${JDK_IMPL_SN}_${LEVEL}.${GROUP}_${ARCH_OS}${SUFFIX}"
				def ACTUAL_TARGET = TARGET ? TARGET : "${LEVEL}.${GROUP}"
				def ACTUAL_BUILD_LIST = BUILD_LIST ? BUILD_LIST : GROUP

				// for jck builds, we need to pass in EXTRA_OPTIONS
				def EXTRA_OPTIONS = "";
				if (GROUP == "jck" && JDK_IMPL == "openj9") {
					EXTRA_OPTIONS = "-Xfuture"
					if (JDK_VERSION != "8") {
						EXTRA_OPTIONS += " --enable-preview"
					}
					if (ARCH_OS == "s390x_zos") {
						// zOS has Attach API disabled by default
						EXTRA_OPTIONS += " -Dcom.ibm.tools.attach.enable=yes"
					}
				}

				// for jck builds, if JCK_GIT_REPO_PREFIX is set, set JCK_GIT_REPO if it is not set
				if (GROUP == "jck" && JCK_GIT_REPO_PREFIX && !JCK_GIT_REPO) {
					JCK_GIT_REPO = "${JCK_GIT_REPO_PREFIX}/JCK${JDK_VERSION}-unzipped.git"
				}

				def DOCKER_REQUIRED = false
				def DOCKERIMAGE_TAG = ""
				def EXTRA_DOCKER_ARGS = ""
				if (GROUP == "external") {
					DOCKER_REQUIRED = true
					DOCKERIMAGE_TAG = "nightly"
					if (LEVEL == "sanity" || LEVEL == "extended") {
						EXTRA_DOCKER_ARGS = '-v ${TEST_JDK_HOME}:/opt/java/openjdk'
					}
				}
				pipelineJob("$ACTUAL_TEST_JOB_NAME") {
 					description('<h1>THIS IS AN AUTOMATICALLY GENERATED JOB. PLEASE DO NOT MODIFY, IT WILL BE OVERWRITTEN.</h1><p>This job is defined in testJobTemplate in the https://github.com/AdoptOpenJDK/openjdk-tests repo. If you wish to change the job, please modify testJobTemplate script.</p>')

					properties {
						pipelineTriggers {
							triggers {
								cron {
									spec(TRIGGER_SCHEDULE)
								}
							}
						}
					}

					definition {
						parameters {
							separator(name: "TEST_ENVIRONMENT", sectionHeader: "Test Environment",
								separatorStyle: "border-width: 0",
								sectionHeaderStyle: """
									background-color: #dbdb8e;
									text-align: center;
									padding: 4px;
									color: #343434;
									font-size: 22px;
									font-weight: normal;
									text-transform: uppercase;
									font-family: 'Orienta', sans-serif;
									letter-spacing: 1px;
									font-style: italic;
								"""
							),
							string(name: 'ADOPTOPENJDK_REPO', defaultValue: 'https://github.com/AdoptOpenJDK/openjdk-tests.git', description: 'AdoptOpenJDK git repo. Please use ssh for zos.')
						}
						cpsScm {
							scm {
								git {
									remote {
										url(ADOPTOPENJDK_REPO_BUILD_PARAM)
									}
									branch(ADOPTOPENJDK_BRANCH_BUILD_PARAM)
									extensions {
										relativeTargetDirectory('openjdk-tests')
										cleanBeforeCheckout()
										pruneStaleBranch()
										cloneOptions {
											depth(1)
											shallow(true)
											timeout(60)
										}
									}
								}
								scriptPath(SCRIPT_PATH)
								lightweight(LIGHT_WEIGHT_CHECKOUT)
							}
						}
						logRotator {
							numToKeep(BUILDS_TO_KEEP)
							artifactNumToKeep(BUILDS_TO_KEEP)
							daysToKeep(DAYS_TO_KEEP)
							artifactDaysToKeep(DAYS_TO_KEEP)
						}
					}
				}
			}
		}
	}
}
